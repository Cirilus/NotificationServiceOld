// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	models "Notifications/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// AccountById provides a mock function with given fields: ctx, id
func (_m *UseCase) AccountById(ctx context.Context, id string) (*models.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllAccounts provides a mock function with given fields: ctx
func (_m *UseCase) AllAccounts(ctx context.Context) ([]models.Account, error) {
	ret := _m.Called(ctx)

	var r0 []models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: ctx, _a1
func (_m *UseCase) CreateAccount(ctx context.Context, _a1 models.Account) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Account) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *UseCase) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: ctx, id, _a2
func (_m *UseCase) UpdateAccount(ctx context.Context, id uuid.UUID, _a2 models.Account) (*models.Account, error) {
	ret := _m.Called(ctx, id, _a2)

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Account) (*models.Account, error)); ok {
		return rf(ctx, id, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Account) *models.Account); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.Account) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAccount provides a mock function with given fields: ctx
func (_m *UseCase) UserAccount(ctx context.Context) (*models.Account, error) {
	ret := _m.Called(ctx)

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Account, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
